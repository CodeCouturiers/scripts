# requirements.txt
# –î–ª—è —Ä–∞–±–æ—Ç—ã —Å Google Trends
# pytrends==4.9.0
# –î–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏
# pandas==2.1.4
# –î–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –∑–æ–Ω–∞–º–∏
# pytz==2023.3.post1
# –î–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram
# pyTelegramBotAPI==4.14.1
# –î–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á
# schedule==1.2.1
# –ï—Å–ª–∏ –≤—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ Jupyter Notebook (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
# jupyter==1.0.0
# ipykernel==6.29.0
# –î–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –∏ –∫–æ–¥–∏—Ä–æ–≤–∫–∏
# urllib3==2.1.0


# pip install pytrends==4.9.0
# pip install pandas==2.1.4
# pip install pytz==2023.3.post1
# pip install pyTelegramBotAPI==4.14.1
# pip install schedule==1.2.1
# pip install urllib3==2.1.0

from pytrends.request import TrendReq
import pandas as pd
import time
from datetime import datetime
import warnings
import schedule
import telebot
import pytz
import urllib.parse

warnings.filterwarnings('ignore')

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TELEGRAM_BOT_TOKEN = ''  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω
TELEGRAM_CHAT_ID = ''  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ ID –≤–∞—à–µ–≥–æ —á–∞—Ç–∞/–∫–∞–Ω–∞–ª–∞
KYIV_TZ = pytz.timezone('Europe/Kiev')
START_TIME = "23:50"  # –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞ –ø–æ –ö–∏–µ–≤—É


class GlobalTrendsAnalyzer:
    def __init__(self, hl='en-US', tz=0):
        self.pytrends = TrendReq(hl=hl, tz=tz)

        # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è IT-—Ç—Ä–µ–Ω–¥–æ–≤
        self.it_keywords = {
            # –û–±—â–∏–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã
            'tech', 'technology', '—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏', '—Ç–µ—Ö–Ω–æ–ª–æ–≥—ñ—ó', 'digital',
            'smart', 'app', 'application', 'software', 'dev', 'development',
            'code', 'coding', 'programming', 'AI', 'ML', 'bot', 'robot',
            'startup', 'browser', 'cyber', 'digital', 'electronic', 'gadget',
            'hardware', 'hosting', 'interface', 'internet', 'mobile', 'network',
            'online', 'platform', 'program', 'security', 'server', 'system',
            'update', 'virtual', 'web', 'website', 'wireless',

            # –ö–æ–º–ø–∞–Ω–∏–∏ –∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
            'google', 'apple', 'microsoft', 'amazon', 'meta', 'twitter',
            'linkedin', 'tiktok', 'instagram', 'telegram', 'whatsapp',
            'android', 'ios', 'windows', 'linux', 'ubuntu', 'chrome',
            'firefox', 'safari', 'edge',

            # –ù–æ–≤—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏
            'blockchain', 'crypto', 'bitcoin', 'ethereum', 'nft',
            'artificial intelligence', 'machine learning', 'deepfake',
            'virtual reality', 'augmented reality', 'metaverse',
            'cloud computing', 'quantum computing', '5g', '6g',

            # –õ–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã
            '–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', '–ø—Ä–æ–≥—Ä–∞–º–º–∞', '—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞', '–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ',
            '–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç', '–≤–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å',
            '–æ–±–ª–∞—á–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏', '–∫–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å', '–∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞',
            '–±–ª–æ–∫—á–µ–π–Ω', '–º–æ–±–∏–ª—å–Ω—ã–π', '—Å–º–∞—Ä—Ç—Ñ–æ–Ω', '–∫–æ–º–ø—å—é—Ç–µ—Ä',
            '–¥–æ–¥–∞—Ç–æ–∫', '–ø—Ä–æ–≥—Ä–∞–º–∞', '—Ä–æ–∑—Ä–æ–±–∫–∞', '—à—Ç—É—á–Ω–∏–π —ñ–Ω—Ç–µ–ª–µ–∫—Ç',
            '—Ö–º–∞—Ä–Ω—ñ —Ç–µ—Ö–Ω–æ–ª–æ–≥—ñ—ó', '–∫—ñ–±–µ—Ä–±–µ–∑–ø–µ–∫–∞', '–∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞'
        }

        # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–¥—ã —Å—Ç—Ä–∞–Ω
        self.country_codes = {
            'US': ['united_states', 'america'],
            'GB': ['united_kingdom', 'uk'],
            'RU': ['russia', 'russian_federation'],
            'UA': ['ukraine'],
            'BY': ['belarus'],
            'KZ': ['kazakhstan'],
            'DE': ['germany', 'deutschland'],
            'FR': ['france'],
            'IT': ['italy', 'italia'],
            'ES': ['spain', 'espana'],
            'CA': ['canada'],
            'AU': ['australia'],
            'JP': ['japan'],
            'KR': ['south_korea', 'korea'],
            'SG': ['singapore'],
            'IN': ['india']
        }

        # –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ä–µ–≥–∏–æ–Ω–æ–≤
        self.regions = {
            '–°–ù–ì –∏ –í–æ—Å—Ç–æ—á–Ω–∞—è –ï–≤—Ä–æ–ø–∞': {
                'RU': {'cities': ['Moscow', 'Saint Petersburg'], 'name': '–†–æ—Å—Å–∏—è'},
                'UA': {'cities': ['Kyiv', 'Kharkiv'], 'name': '–£–∫—Ä–∞–∏–Ω–∞'},
                'BY': {'cities': ['Minsk', 'Gomel'], 'name': '–ë–µ–ª–∞—Ä—É—Å—å'},
                'KZ': {'cities': ['Almaty', 'Astana'], 'name': '–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω'}
            },
            '–ó–∞–ø–∞–¥–Ω–∞—è –ï–≤—Ä–æ–ø–∞': {
                'GB': {'cities': ['London', 'Manchester'], 'name': '–í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è'},
                'DE': {'cities': ['Berlin', 'Munich'], 'name': '–ì–µ—Ä–º–∞–Ω–∏—è'},
                'FR': {'cities': ['Paris', 'Marseille'], 'name': '–§—Ä–∞–Ω—Ü–∏—è'},
                'IT': {'cities': ['Rome', 'Milan'], 'name': '–ò—Ç–∞–ª–∏—è'},
                'ES': {'cities': ['Madrid', 'Barcelona'], 'name': '–ò—Å–ø–∞–Ω–∏—è'}
            },
            '–°–µ–≤–µ—Ä–Ω–∞—è –ê–º–µ—Ä–∏–∫–∞': {
                'US': {'cities': ['New York', 'Los Angeles'], 'name': '–°–®–ê'},
                'CA': {'cities': ['Toronto', 'Vancouver'], 'name': '–ö–∞–Ω–∞–¥–∞'}
            },
            '–ê–∑–∏—è –∏ –û–∫–µ–∞–Ω–∏—è': {
                'AU': {'cities': ['Sydney', 'Melbourne'], 'name': '–ê–≤—Å—Ç—Ä–∞–ª–∏—è'},
                'JP': {'cities': ['Tokyo', 'Osaka'], 'name': '–Ø–ø–æ–Ω–∏—è'},
                'KR': {'cities': ['Seoul', 'Busan'], 'name': '–Æ–∂–Ω–∞—è –ö–æ—Ä–µ—è'},
                'SG': {'cities': ['Singapore'], 'name': '–°–∏–Ω–≥–∞–ø—É—Ä'},
                'IN': {'cities': ['Mumbai', 'Delhi'], 'name': '–ò–Ω–¥–∏—è'}
            }
        }

    def get_trending_searches(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–æ–≤—ã—Ö –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ —Å–æ –≤—Å–µ—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤"""
        all_trends = {}

        for region_name, countries in self.regions.items():
            print(f"\nüåç –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–æ–≤ –¥–ª—è —Ä–µ–≥–∏–æ–Ω–∞: {region_name}")
            region_trends = {}

            for country_code, country_data in countries.items():
                country_name = country_data['name']
                print(f"  üìç –°—Ç—Ä–∞–Ω–∞: {country_name} ({country_code})")

                # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö –∫–æ–¥–æ–≤
                alt_codes = self.country_codes.get(country_code, [])
                all_codes = [country_code] + alt_codes

                success = False
                for code in all_codes:
                    try:
                        print(f"    üîÑ –ü—Ä–æ–±—É–µ–º –∫–æ–¥ —Å—Ç—Ä–∞–Ω—ã: {code}")
                        trends = self.pytrends.trending_searches(pn=code)

                        if isinstance(trends, pd.DataFrame) and not trends.empty:
                            trends_list = trends.values.flatten().tolist()
                            region_trends[country_name] = {
                                'trends': trends_list,
                                'cities': country_data['cities']
                            }
                            print(f"    ‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(trends_list)} —Ç—Ä–µ–Ω–¥–æ–≤")
                            success = True
                            break

                    except Exception as e:
                        print(f"    ‚ö†Ô∏è –ö–æ–¥ {code} –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {str(e)}")

                if not success:
                    print(f"    ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç—Ä–µ–Ω–¥—ã –¥–ª—è {country_name}")

                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                time.sleep(2)

            all_trends[region_name] = region_trends

        return all_trends

    def is_it_related(self, term):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –ª–∏ —Ç–µ—Ä–º–∏–Ω –∫ IT-—Ç–µ–º–∞—Ç–∏–∫–µ"""
        if not isinstance(term, str):
            return False
        term = term.lower()
        return any(keyword.lower() in term.lower() for keyword in self.it_keywords)

    def analyze_trends(self):
        """–ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤ –ø–æ –≤—Å–µ–º —Ä–µ–≥–∏–æ–Ω–∞–º"""
        try:
            results = {
                'trends_by_region': {},
                'it_trends': {},
                'summary': {
                    'total_trends': 0,
                    'it_related_trends': 0,
                    'regions_analyzed': 0,
                    'countries_analyzed': 0,
                    'analysis_date': datetime.now(KYIV_TZ).strftime('%Y-%m-%d %H:%M:%S')
                }
            }

            # –ü–æ–ª—É—á–∞–µ–º –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç—Ä–µ–Ω–¥—ã
            trends_data = self.get_trending_searches()
            total_trends = 0
            it_trends_set = set()
            countries_analyzed = 0

            for region_name, region_data in trends_data.items():
                results['trends_by_region'][region_name] = {}
                results['it_trends'][region_name] = {}

                for country_name, country_data in region_data.items():
                    if 'trends' in country_data:
                        trends = country_data['trends']
                        total_trends += len(trends)
                        countries_analyzed += 1

                        # –ù–∞—Ö–æ–¥–∏–º IT-—Ç—Ä–µ–Ω–¥—ã
                        country_it_trends = [trend for trend in trends if self.is_it_related(trend)]

                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ —Ç—Ä–µ–Ω–¥—ã –∏ IT-—Ç—Ä–µ–Ω–¥—ã
                        results['trends_by_region'][region_name][country_name] = trends
                        results['it_trends'][region_name][country_name] = country_it_trends

                        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ–±—â–∏–π —Å–µ—Ç IT-—Ç—Ä–µ–Ω–¥–æ–≤
                        it_trends_set.update(country_it_trends)

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–≤–æ–¥–∫—É
            results['summary'].update({
                'total_trends': total_trends,
                'it_related_trends': len(it_trends_set),
                'regions_analyzed': len(trends_data),
                'countries_analyzed': countries_analyzed
            })

            return results

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ç—Ä–µ–Ω–¥–æ–≤: {str(e)}")
            return None

    def format_telegram_message(self, results):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram —Å —É—á–µ—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –Ω–∞ —á–∞—Å—Ç–∏"""
        message_parts = []

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        message_parts.append("üåç *–ì–õ–û–ë–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó IT-–¢–†–ï–ù–î–û–í*\n")
        message_parts.append(f"üìÖ –î–∞—Ç–∞: {results['summary']['analysis_date']}")
        message_parts.append(f"üåê –†–µ–≥–∏–æ–Ω–æ–≤: {results['summary']['regions_analyzed']}")
        message_parts.append(f"üè≥Ô∏è –°—Ç—Ä–∞–Ω: {results['summary']['countries_analyzed']}")
        message_parts.append(f"üìä –í—Å–µ–≥–æ —Ç—Ä–µ–Ω–¥–æ–≤: {results['summary']['total_trends']}")
        message_parts.append(f"üíª IT-—Ç—Ä–µ–Ω–¥–æ–≤: {results['summary']['it_related_trends']}\n")

        # –¢—Ä–µ–Ω–¥—ã –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º
        for region_name, region_data in results['trends_by_region'].items():
            message_parts.append(f"\nüó∫ *{region_name}*\n")

            for country_name, trends in region_data.items():
                message_parts.append(f"\nüìç *{country_name}*")

                for i, trend in enumerate(trends[:10], 1):
                    try:
                        trend_text = str(trend)
                        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã Markdown
                        trend_text = trend_text.replace('*', '\\*').replace('_', '\\_').replace('`', '\\`')
                        trend_text = trend_text.replace('[', '\\[').replace(']', '\\]')
                        trend_text = trend_text.replace('(', '\\(').replace(')', '\\)')

                        is_it = "üíª" if self.is_it_related(trend) else "üîç"
                        google_link = f"https://www.google.com/search?q={urllib.parse.quote(trend_text)}"
                        message_parts.append(f"{i}. {is_it} [{trend_text}]({google_link})")
                    except Exception as e:
                        message_parts.append(f"{i}. {is_it} {trend}")

        # –†–∞–∑–¥–µ–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏ —Å —É—á–µ—Ç–æ–º –ª–∏–º–∏—Ç–∞
        return split_message_into_parts(message_parts)


def send_telegram_message(bot_token, chat_id, message_parts):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram —Å —É—á–µ—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –Ω–∞ —á–∞—Å—Ç–∏"""
    try:
        bot = telebot.TeleBot(bot_token)
        success = True

        for part in message_parts:
            try:
                bot.send_message(
                    chat_id=chat_id,
                    text=part,
                    parse_mode='Markdown',
                    disable_web_page_preview=True
                )
                time.sleep(1)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–æ–π —á–∞—Å—Ç–µ–π
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —á–∞—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                success = False

        return success
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞ Telegram: {e}")
        return False


def job():
    """–ó–∞–¥–∞—á–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é"""
    start_time = datetime.now(KYIV_TZ)
    print(f"\nüîÑ –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–æ–≤: {start_time.strftime('%Y-%m-%d %H:%M:%S')}")

    try:
        # –°–æ–∑–¥–∞–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∏ –ø–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        analyzer = GlobalTrendsAnalyzer()
        results = analyzer.analyze_trends()

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram
        message_parts = analyzer.format_telegram_message(results)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if send_telegram_message(TELEGRAM_BOT_TOKEN, TELEGRAM_CHAT_ID, message_parts):
            print("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ Telegram")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ Telegram")

        # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        end_time = datetime.now(KYIV_TZ)
        execution_time = (end_time - start_time).total_seconds()
        print(f"‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {execution_time:.2f} —Å–µ–∫—É–Ω–¥")
        print(format_time_until_next_run())

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏: {e}")
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Ç–∞–∫–∂–µ –≤—ã–≤–æ–¥–∏–º –≤—Ä–µ–º—è
        end_time = datetime.now(KYIV_TZ)
        execution_time = (end_time - start_time).total_seconds()
        print(f"‚è±Ô∏è –í—Ä–µ–º—è –¥–æ –æ—à–∏–±–∫–∏: {execution_time:.2f} —Å–µ–∫—É–Ω–¥")

def split_message_into_parts(message_parts, max_length=4096):
    """
    –†–∞–∑–¥–µ–ª—è–µ—Ç –º–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫ –Ω–∞ —á–∞—Å—Ç–∏, –Ω–µ –ø—Ä–µ–≤—ã—à–∞—é—â–∏–µ max_length —Å–∏–º–≤–æ–ª–æ–≤,
    —Å —É—á–µ—Ç–æ–º —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ —Ä–∞–∑–¥–µ–ª–æ–≤ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    """
    current_part = []
    current_length = 0
    final_parts = []

    for part in message_parts:
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏ –∫ –¥–ª–∏–Ω–µ —á–∞—Å—Ç–∏
        part_length = len(part) + 1  # +1 –¥–ª—è \n

        # –ï—Å–ª–∏ —Ç–µ–∫—É—â–∞—è —á–∞—Å—Ç—å + –Ω–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –ø—Ä–µ–≤—ã—à–∞—é—Ç –ª–∏–º–∏—Ç
        if current_length + part_length > max_length and current_part:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é —á–∞—Å—Ç—å
            final_parts.append('\n'.join(current_part))
            current_part = []
            current_length = 0

        # –ï—Å–ª–∏ –æ—Ç–¥–µ–ª—å–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –±–æ–ª—å—à–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã
        if part_length > max_length:
            # –ï—Å–ª–∏ —Ç–µ–∫—É—â–∞—è —á–∞—Å—Ç—å –Ω–µ –ø—É—Å—Ç–∞, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ—ë
            if current_part:
                final_parts.append('\n'.join(current_part))
                current_part = []
                current_length = 0

            # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É
            words = part.split()
            current_line = []
            current_line_length = 0

            for word in words:
                word_length = len(word) + 1  # +1 –¥–ª—è –ø—Ä–æ–±–µ–ª–∞
                if current_line_length + word_length <= max_length:
                    current_line.append(word)
                    current_line_length += word_length
                else:
                    if current_line:
                        final_parts.append(' '.join(current_line))
                    current_line = [word]
                    current_line_length = len(word)

            if current_line:
                current_part = [' '.join(current_line)]
                current_length = len(current_part[0])
        else:
            current_part.append(part)
            current_length += part_length

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —á–∞—Å—Ç—å, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
    if current_part:
        final_parts.append('\n'.join(current_part))

    return final_parts


def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
    """
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—ã–π —Ä–∞–∑ —Å—Ä–∞–∑—É –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫...")
    job()

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
    schedule.every(30).minutes.do(job)

    print("üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç")

    # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    while True:
        try:
            schedule.run_pending()

            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ª–µ–¥—É—é—â–µ–º –∑–∞–ø—É—Å–∫–µ
            next_run = schedule.next_run()
            if next_run:
                next_run_kyiv = next_run.astimezone(KYIV_TZ)
                current_time = datetime.now(KYIV_TZ)  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è —Å timezone
                time_until = (next_run_kyiv - current_time).total_seconds() / 60
                print(f"‚è≥ –î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞: {int(time_until)} –º–∏–Ω—É—Ç")

            # –°–ø–∏–º 60 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
            time.sleep(60)

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –≥–ª–∞–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
            # –ñ–¥–µ–º 5 –º–∏–Ω—É—Ç –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            time.sleep(300)
            continue

def format_time_until_next_run():
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞"""
    next_run = schedule.next_run()
    if next_run:
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞ –≤ UTC, –∑–∞—Ç–µ–º –≤ –ö–∏–µ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è
        if not next_run.tzinfo:
            next_run = pytz.UTC.localize(next_run)
        next_run_kyiv = next_run.astimezone(KYIV_TZ)
        current_time = datetime.now(KYIV_TZ)
        minutes_until = int((next_run_kyiv - current_time).total_seconds() / 60)
        return f"‚è≥ –î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞: {minutes_until} –º–∏–Ω—É—Ç (–≤ {next_run_kyiv.strftime('%H:%M:%S')} –ø–æ –ö–∏–µ–≤—É)"
    return "‚è≥ –í—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ"

if __name__ == "__main__":
    try:
        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ timezone –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞
        KYIV_TZ = pytz.timezone('Europe/Kiev')
        main()
    except KeyboardInterrupt:
        print("\nüëã –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
